//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Taguhi Abgaryan on 2/20/17.
//  Copyright Â© 2017 Taguhi Abgaryan. All rights reserved.
//

import UIKit
import Messages
import MobileCoreServices

class MessagesViewController: MSMessagesAppViewController {
    
    // MARK: - Properties
    
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var sendButton: UIButton!
    @IBOutlet weak var cameraButton: UIButton!
    @IBOutlet weak var galleryButton: UIButton!
    let imagePicker = UIImagePickerController()
    
    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        imagePicker.delegate = self
        sendButton.tintColor = UIColor.darkGray
        cameraButton.tintColor = UIColor.darkGray
        galleryButton.tintColor = UIColor.darkGray
    }
    
    // MARK: - Buttons Actions
    
    @IBAction func sendMessageButtonAction(_ sender: UIButton) {
        if let image = createImageForMessage(),
            let conversation = activeConversation {
            // layout
            let layout = MSMessageTemplateLayout()
            layout.image = image
            layout.caption = "smth"
            // message
            let message = MSMessage()
            message.layout = layout
            message.url = URL(string: "")
            // insert in conversation
            conversation.insert(message, completionHandler: { (error: Error?) in
                if error != nil {
                    self.showAlert(title: "Error", message: "Error Message: \(error)")
                }
            })
        }
    }
    
    @IBAction func cameraButtonAction(_ sender: UIButton) {
        if(UIImagePickerController .isSourceTypeAvailable(UIImagePickerControllerSourceType.camera)) {
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            present(imagePicker, animated: true, completion: nil)
        } else {
            showAlert(title: "Error", message: "Camera is not available.")
        }
    }
    
    @IBAction func galleryButtonAction(_ sender: UIButton) {
        imagePicker.delegate = self
        imagePicker.sourceType = .photoLibrary
        imagePicker.mediaTypes = [kUTTypeImage as String]
        imagePicker.allowsEditing = false
        self.present(imagePicker, animated: true, completion: nil)
    }
    
    private func createImageForMessage() -> UIImage? {
        return imageView.image
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    // MARK: - Show Message via Alert
    
    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let defaultAction = UIAlertAction(title: "OK", style: .default) { (alert: UIAlertAction!) -> Void in
//                self.dismiss(animated: true, completion: nil)
        }
        alert.addAction(defaultAction)
        present(alert, animated: true, completion:nil)
    }
}

// MARK: - UIImagePickerControllerDelegate
extension MessagesViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    public func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let pickedImage = info[UIImagePickerControllerOriginalImage] as? UIImage {
            imageView.contentMode = .scaleAspectFit
            imageView.image = pickedImage
        }
        dismiss(animated: true, completion: nil)
    }
    
    public func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        dismiss(animated: true, completion: nil)
    }
}


